import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.HashMap;

public class main {
    public static void main(String[] args) throws IOException{

        // we expect exactly one argument: the name of the input file
        if (args.length!=1) {
            System.err.println("\n");
            System.err.println("Simple calculator\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename=args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        simpleCalcLexer lex = new simpleCalcLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        simpleCalcParser parser = new simpleCalcParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Double result=interpreter.visit(parseTree);

        System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {
    public HashMap<String, Double> env = new HashMap<String, Double>();

    public Double visitStart(simpleCalcParser.StartContext ctx){
        for (simpleCalcParser.StatementContext s:ctx.s)
            visit(s);
        return visit(ctx.e);
    };

    public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
        return visit(ctx.e);
    };

    public Double visitVariable(simpleCalcParser.VariableContext ctx){
        return env.get(ctx.x.getText());
    };

    public Double visitAddSub(simpleCalcParser.AddSubContext ctx){
        if (ctx.op.getText().equals("-")) {
            return visit(ctx.e1)-visit(ctx.e2);
        } else {
            return visit(ctx.e1)+visit(ctx.e2);
        }
    };

    public Double visitMulDiv(simpleCalcParser.MulDivContext ctx){
        if (ctx.op.getText().equals("/"))
            return visit(ctx.e1)/visit(ctx.e2);
        else
            return visit(ctx.e1)*visit(ctx.e2);
    };

    public Double visitConstant(simpleCalcParser.ConstantContext ctx){
        return Double.parseDouble(ctx.c.getText());
    };

    public Double visitCompare(simpleCalcParser.CompareContext ctx){
        switch (ctx.op.getText()){
            case "<":
                return visit(ctx.e1)<visit(ctx.e2) ? 1.0 : 0.0;
            case ">":
                return visit(ctx.e1)>visit(ctx.e2) ? 1.0 : 0.0;
            case "==":
                double diff = visit(ctx.e1)-visit(ctx.e1);
                double my = 0.00000000000000001;
                if (diff < my && diff > -my)
                    return 1.0;
                return 0.0;
            case "!=":
                return visit(ctx.e1)!=visit(ctx.e2) ? 1.0 : 0.0;
            default:
                return 0.0;
        }
    };

    public Double visitBinary(simpleCalcParser.BinaryContext ctx){
        int v1 = (visit(ctx.e1)).intValue();
        int v2 = (visit(ctx.e2)).intValue();
        switch (ctx.op.getText()){
            case "<<":
                return Double.valueOf(v1<<v2);
            case ">>":
                return Double.valueOf(v1>>v2);
            case "&":
                return Double.valueOf(v1&v2);
            case "|":
                return Double.valueOf(v1|v2);
            case "^":
                return Double.valueOf(v1^v2);
            default:
                return 0.0;
        }
    };

    public Double visitOnes(simpleCalcParser.OnesContext ctx){
        return Double.valueOf(~(visit(ctx.e).intValue()));
    };

    public Double visitToAssign(simpleCalcParser.ToAssignContext ctx){
        return visit(ctx.a);
    };

    public Double visitWhile(simpleCalcParser.WhileContext ctx){
        while(visit(ctx.b) == 1.0) {
            visit(ctx.a);
        } return 0.0;
    };

    public Double visitIf(simpleCalcParser.IfContext ctx){
        if (visit(ctx.b) == 1.0)
            return visit(ctx.a);
        /* else if (ctx.s != null) */
            return visit(ctx.s);
        /* return 0.0; */
    };

    public Double visitNot(simpleCalcParser.NotContext ctx){
        if (visit(ctx.b) == 0.0)
            return 1.0;
        else
            return 0.0;
    };

    public Double visitAnd(simpleCalcParser.AndContext ctx){
        if (visit(ctx.b1) == 1.0 && visit(ctx.b2) == 1.0)
            return 1.0;
        else
            return 0.0;
    };

    public Double visitOr(simpleCalcParser.OrContext ctx){
        if (visit(ctx.b1) == 1.0 || visit(ctx.b2) == 1.0)
            return 1.0;
        else
            return 0.0;
    };

    public Double visitAssignSequence(simpleCalcParser.AssignSequenceContext ctx){
        return visit(ctx.a);
    };

    public Double visitAssignment(simpleCalcParser.AssignmentContext ctx){
        String varname = ctx.v.getText();
        double val = visit(ctx.e);
        env.put(varname, val);
        return val;
    };

    public Double visitAssignSplit(simpleCalcParser.AssignSplitContext ctx){
        visit(ctx.a1);
        visit(ctx.a2);
        return 1.0;
    };
}
